
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_mean_risk/plot_7_management_fees.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1_mean_risk_plot_7_management_fees.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_mean_risk_plot_7_management_fees.py:


===============
Management Fees
===============

This tutorial shows how to incorporate management fees (MF) into the
:class:`~skfolio.optimization.MeanRisk` optimization.

By using The `management_fees` parameter, you can add linear MF to the optimization
problem:

.. math:: total\_fee = \sum_{i=1}^{N} f_{i} \times w_{i}

with :math:`f_{i}` the management fee of asset i and :math:`w_{i}` its weight.
The float :math:`total\_fee` is impacting the portfolio expected return in the optimization:

.. math:: expected\_return = \mu^{T} \cdot w - total\_fee

with :math:`\mu` the vector af assets expected returns and :math:`w` the vector of
assets weights.

The `management_fees` parameter can be a float, a dictionary or an array-like of
shape `(n_assets, )`. If a float is provided, it is applied to each asset.
If a dictionary is provided, its (key/value) pair must be the (asset name/asset MF) and
the input `X` of the `fit` method must be a DataFrame with the assets names in
columns. The default is 0.0 (no management fees).

.. note::

    Another approach is to direcly impact the MF to the input `X` in order to express
    the returns net of fee. However, when estimating the :math:`\mu` parameter using,
    for example, Shrinkage estimators, this approach would mix a deterministic amount
    with an uncertain one leading to unwanted bias in the management fees.

.. GENERATED FROM PYTHON SOURCE LINES 37-43

Data
====
We load the S&P 500 :ref:`dataset <datasets>` composed of the daily prices of 20
assets from the S&P 500 Index composition starting from 1990-01-02 up to 2022-12-28.
We select only 3 assets to make the example more readable, which are Apple (AAPL),
General Electric (GE) and JPMorgan (JPM).

.. GENERATED FROM PYTHON SOURCE LINES 43-58

.. code-block:: Python


    import numpy as np
    from plotly.io import show

    from skfolio import Population
    from skfolio.datasets import load_sp500_dataset
    from skfolio.model_selection import WalkForward, cross_val_predict
    from skfolio.optimization import MeanRisk, ObjectiveFunction
    from skfolio.preprocessing import prices_to_returns

    prices = load_sp500_dataset()
    prices = prices[["AAPL", "GE", "JPM"]]

    X = prices_to_returns(prices)








.. GENERATED FROM PYTHON SOURCE LINES 59-63

Model
=====
In this tutorial, we will use the Maximum Mean-Variance Utility model with a risk
aversion of 1.0:

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: Python

    model = MeanRisk(objective_function=ObjectiveFunction.MAXIMIZE_UTILITY)
    model.fit(X)
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([6.17733231e-01, 3.78775169e-09, 3.82266765e-01])



.. GENERATED FROM PYTHON SOURCE LINES 68-79

Management Fees
===============
Management fees are usually used in assets under management but for this example we
will assume that it also applies for the below stocks:

  * Apple: 3% p.a.
  * General Electric: 6% p.a.
  * JPMorgan: 1% p.a.

The MF are expressed in per annum, so we need to convert them in daily MF.
We suppose 252 trading days in a year:

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    management_fees = {"AAPL": 0.03 / 252, "GE": 0.06 / 252, "JPM": 0.01 / 252}
    # Same as management_fees = np.array([0.03, 0.06, 0.01]) / 252

    model_mf = MeanRisk(
        objective_function=ObjectiveFunction.MAXIMIZE_UTILITY,
        management_fees=management_fees,
    )
    model_mf.fit(X)
    model_mf.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([5.74787861e-01, 1.43028265e-08, 4.25212125e-01])



.. GENERATED FROM PYTHON SOURCE LINES 90-91

The higher MF of Apple induced a change of weights toward JPMorgan:

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: Python

    model_mf.weights_ - model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([-4.29453703e-02,  1.05150748e-08,  4.29453598e-02])



.. GENERATED FROM PYTHON SOURCE LINES 94-98

Multi-period portfolio
======================
Let's assume that we want to rebalance our portfolio every 60 days by re-fitting the
model on the latest 60 days. We test the impact of MF using Walk Forward Analysis:

.. GENERATED FROM PYTHON SOURCE LINES 98-102

.. code-block:: Python

    holding_period = 60
    fitting_period = 60
    cv = WalkForward(train_size=fitting_period, test_size=holding_period)








.. GENERATED FROM PYTHON SOURCE LINES 103-104

As explained above, we transform the yearly MF into a daily MF:

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: Python

    management_fees = np.array([0.03, 0.06, 0.01]) / 252








.. GENERATED FROM PYTHON SOURCE LINES 107-110

First, we train the model without MF and test it with MF.
Note that `portfolio_params` are parameters passed to the Portfolio during `predict`
and **not** during `fit`:

.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: Python

    model = MeanRisk(
        objective_function=ObjectiveFunction.MAXIMIZE_UTILITY,
        portfolio_params=dict(management_fees=management_fees),
    )
    # pred1 is a MultiPeriodPortfolio
    pred1 = cross_val_predict(model, X, cv=cv, n_jobs=-1)
    pred1.name = "pred1"








.. GENERATED FROM PYTHON SOURCE LINES 119-120

Then, we train and test the model with MF:

.. GENERATED FROM PYTHON SOURCE LINES 120-124

.. code-block:: Python

    model.set_params(management_fees=management_fees)
    pred2 = cross_val_predict(model, X, cv=cv, n_jobs=-1)
    pred2.name = "pred2"








.. GENERATED FROM PYTHON SOURCE LINES 125-127

We visualize the results by plotting the cumulative returns of the successive test
periods:

.. GENERATED FROM PYTHON SOURCE LINES 127-131

.. code-block:: Python

    population = Population([pred1, pred2])
    fig = population.plot_cumulative_returns()
    show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_7_management_fees_001.html





.. GENERATED FROM PYTHON SOURCE LINES 132-136

|

We notice that the model **fitted with MF** outperform the model **fitted without
MF**.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.075 seconds)


.. _sphx_glr_download_auto_examples_1_mean_risk_plot_7_management_fees.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skfolio/skfolio/gh-pages?urlpath=lab/tree/notebooks/auto_examples/1_mean_risk/plot_7_management_fees.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_7_management_fees.ipynb <plot_7_management_fees.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_7_management_fees.py <plot_7_management_fees.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_7_management_fees.zip <plot_7_management_fees.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
