
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_mean_risk/plot_10_tracking_error.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1_mean_risk_plot_10_tracking_error.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_mean_risk_plot_10_tracking_error.py:


==============
Tracking Error
==============

This tutorial shows how to incorporate a tracking error constraint into the
:class:`~skfolio.optimization.MeanRisk` optimization.

The tracking error is defined as the RMSE (root-mean-square error) of the portfolio
returns compared to a target returns.

In this example we will create a long-short portfolio of 20 stocks that tracks the
SPX Index with a tracking error constraint of 0.30% while minimizing the CVaR
(Conditional Value at Risk) at 95%.

.. GENERATED FROM PYTHON SOURCE LINES 18-22

Data
====
We load the S&P 500 :ref:`dataset <datasets>` composed of the daily prices of 20
assets from the S&P 500 Index composition and the prices of the S&P 500 Index itself:

.. GENERATED FROM PYTHON SOURCE LINES 22-41

.. code-block:: Python


    import numpy as np
    from plotly.io import show
    from sklearn import clone
    from sklearn.model_selection import train_test_split

    from skfolio import Population, RiskMeasure
    from skfolio.datasets import load_sp500_dataset, load_sp500_index
    from skfolio.optimization import EqualWeighted, MeanRisk, ObjectiveFunction
    from skfolio.preprocessing import prices_to_returns

    prices = load_sp500_dataset()
    prices = prices["2014":]
    spx_prices = load_sp500_index()
    spx_prices = spx_prices["2014":]

    X, y = prices_to_returns(prices, spx_prices)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=False)








.. GENERATED FROM PYTHON SOURCE LINES 42-49

Model
=====
We create two long-short models: a Minimum CVaR without tracking error and a
Minimum CVaR with a 0.30% tracking error constraint versus the SPX Index.
A 0.30% tracking error constraint is a constraint on the RMSE of the difference
between the daily portfolio returns and the SPX Index returns.
We first create the Minimum CVaR model without tracking error:

.. GENERATED FROM PYTHON SOURCE LINES 49-58

.. code-block:: Python

    model_no_tracking = MeanRisk(
        objective_function=ObjectiveFunction.MINIMIZE_RISK,
        risk_measure=RiskMeasure.CVAR,
        min_weights=-1,
        portfolio_params=dict(name="Minimum-CVaR", tag="No Tracking"),
    )
    model_no_tracking.fit(X_train, y_train)
    model_no_tracking.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([ 0.03676195, -0.02374444,  0.02155918,  0.02117437,  0.0373302 ,
           -0.00370324,  0.01028137,  0.0298146 , -0.07317879,  0.15980287,
           -0.00139632,  0.01100645, -0.0810491 ,  0.20227491,  0.21580436,
            0.17510456,  0.00322793,  0.06858182,  0.11093659,  0.07941073])



.. GENERATED FROM PYTHON SOURCE LINES 59-61

Then we create the Minimum CVaR model with a 0.30% tracking error constraint
versus the SPX Index:

.. GENERATED FROM PYTHON SOURCE LINES 61-69

.. code-block:: Python

    model_tracking = clone(model_no_tracking)
    model_tracking.set_params(
        max_tracking_error=0.003,
        portfolio_params=dict(name="Minimum-CVaR", tag="Tracking 0.30%"),
    )
    model_tracking.fit(X_train, y_train)
    model_no_tracking.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([ 0.03676195, -0.02374444,  0.02155918,  0.02117437,  0.0373302 ,
           -0.00370324,  0.01028137,  0.0298146 , -0.07317879,  0.15980287,
           -0.00139632,  0.01100645, -0.0810491 ,  0.20227491,  0.21580436,
            0.17510456,  0.00322793,  0.06858182,  0.11093659,  0.07941073])



.. GENERATED FROM PYTHON SOURCE LINES 70-71

For comparison, we create a single asset Portfolio model containing the SPX Index.

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: Python

    model_spx = EqualWeighted(portfolio_params=dict(name="SPX Index"))
    model_spx.fit(y_train)
    model_spx.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1.])



.. GENERATED FROM PYTHON SOURCE LINES 76-77

Now we plot both models and the SPX Index on the training set:

.. GENERATED FROM PYTHON SOURCE LINES 77-88

.. code-block:: Python

    ptf_no_tracking_train = model_no_tracking.predict(X_train)
    ptf_tracking_train = model_tracking.predict(X_train)
    spx_train = model_spx.predict(y_train)
    # Note that we coule have directly used:
    # train_spx = Portfolio(y_train, weights=[1], name="SPX Index")

    population_train = Population([ptf_no_tracking_train, ptf_tracking_train, spx_train])

    fig = population_train.plot_cumulative_returns()
    show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_10_tracking_error_001.html





.. GENERATED FROM PYTHON SOURCE LINES 89-92

|

Let's print the tracking error and the CVaR:

.. GENERATED FROM PYTHON SOURCE LINES 92-102

.. code-block:: Python

    for portfolio in [ptf_no_tracking_train, ptf_tracking_train]:
        tracking_rmse = np.sqrt(np.mean((portfolio.returns - spx_train.returns) ** 2))
        print("========================")
        print(portfolio.tag)
        print("========================")
        print(f"Tracking RMSE: {tracking_rmse:0.2%}")
        print(f"CVaR at 95%: {portfolio.cvar:0.2%}")
        print(f"CVaR ratio: {portfolio.cvar_ratio:0.2f}")
        print("\n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ========================
    No Tracking
    ========================
    Tracking RMSE: 0.60%
    CVaR at 95%: 1.58%
    CVaR ratio: 0.02


    ========================
    Tracking 0.30%
    ========================
    Tracking RMSE: 0.30%
    CVaR at 95%: 1.78%
    CVaR ratio: 0.03






.. GENERATED FROM PYTHON SOURCE LINES 103-106

The model with tracking error achieved the required RMSE of 0.30% versus the SPX on
the training set. The tradeoff of this constraint is the higher CVaR value versus
the model without tracking error.

.. GENERATED FROM PYTHON SOURCE LINES 108-111

Prediction
==========
Finally, we predict both models on the test set:

.. GENERATED FROM PYTHON SOURCE LINES 111-125

.. code-block:: Python

    ptf_no_tracking_test = model_no_tracking.predict(X_test)
    ptf_tracking_test = model_tracking.predict(X_test)
    spx_test = model_spx.predict(y_test)

    for portfolio in [ptf_no_tracking_test, ptf_tracking_test]:
        tracking_rmse = np.sqrt(np.mean((portfolio.returns - spx_test.returns) ** 2))
        print("========================")
        print(portfolio.tag)
        print("========================")
        print(f"Tracking RMSE: {tracking_rmse:0.2%}")
        print(f"CVaR at 95%: {portfolio.cvar:0.2%}")
        print(f"CVaR ratio: {portfolio.cvar_ratio:0.2f}")
        print("\n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ========================
    No Tracking
    ========================
    Tracking RMSE: 1.04%
    CVaR at 95%: 3.08%
    CVaR ratio: 0.02


    ========================
    Tracking 0.30%
    ========================
    Tracking RMSE: 0.58%
    CVaR at 95%: 3.39%
    CVaR ratio: 0.02






.. GENERATED FROM PYTHON SOURCE LINES 126-128

As expected, the model with tracking error also achieved a lower RMSE on the test set
compared to the model without tracking error.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.173 seconds)


.. _sphx_glr_download_auto_examples_1_mean_risk_plot_10_tracking_error.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skfolio/skfolio/gh-pages?urlpath=lab/tree/notebooks/auto_examples/1_mean_risk/plot_10_tracking_error.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_10_tracking_error.ipynb <plot_10_tracking_error.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_10_tracking_error.py <plot_10_tracking_error.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_10_tracking_error.zip <plot_10_tracking_error.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
