
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_mean_risk/plot_11_empirical_prior.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1_mean_risk_plot_11_empirical_prior.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_mean_risk_plot_11_empirical_prior.py:


===============
Empirical Prior
===============

This tutorial shows how to use the :class:`~skfolio.prior.EmpiricalPrior` estimator in
the :class:`~skfolio.optimization.MeanRisk` optimization.

A :ref:`prior estimator <prior>` fits a :class:`~skfolio.prior.PriorModel` containing
the distribution estimate of asset returns. It represents the investor's prior beliefs
about the model used to estimate such distribution.

The `PriorModel` is a dataclass containing:

    * `mu`: Expected returns estimation
    * `covariance`: Covariance matrix estimation
    * `returns`: assets returns estimation
    * `cholesky` : Lower-triangular Cholesky factor of the covariance estimation (optional)

The `EmpiricalPrior` estimator simply estimates the `PriorModel` from a `mu_estimator`
and a `covariance_estimator`.

In this tutorial we will build a Maximum Sharpe Ratio portfolio using the
`EmpiricalPrior` estimator with James-Stein shrinkage for the estimation of expected
returns and Denoising for the estimation of the covariance matrix.

.. GENERATED FROM PYTHON SOURCE LINES 29-33

Data
====
We load the S&P 500 :ref:`dataset <datasets>` composed of the daily prices of 20
assets from the SPX Index composition starting from 1990-01-02 up to 2022-12-28:

.. GENERATED FROM PYTHON SOURCE LINES 33-48

.. code-block:: Python


    from plotly.io import show
    from sklearn.model_selection import train_test_split

    from skfolio import Population, RiskMeasure
    from skfolio.datasets import load_sp500_dataset
    from skfolio.moments import DenoiseCovariance, ShrunkMu
    from skfolio.optimization import MeanRisk, ObjectiveFunction
    from skfolio.preprocessing import prices_to_returns
    from skfolio.prior import EmpiricalPrior

    prices = load_sp500_dataset()
    X = prices_to_returns(prices)
    X_train, X_test = train_test_split(X, test_size=0.33, shuffle=False)








.. GENERATED FROM PYTHON SOURCE LINES 49-53

Model
=====
We create a Maximum Sharpe Ratio model with shrinkage for the estimation of the
expected returns and denoising for the estimation of the covariance matrix:

.. GENERATED FROM PYTHON SOURCE LINES 53-64

.. code-block:: Python

    model = MeanRisk(
        risk_measure=RiskMeasure.VARIANCE,
        objective_function=ObjectiveFunction.MAXIMIZE_RATIO,
        prior_estimator=EmpiricalPrior(
            mu_estimator=ShrunkMu(), covariance_estimator=DenoiseCovariance()
        ),
        portfolio_params=dict(name="Max Sharpe - ShrunkMu & DenoiseCovariance"),
    )
    model.fit(X_train)
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([5.30314924e-02, 3.93769628e-10, 1.58269071e-10, 5.78708311e-02,
           1.05717669e-01, 4.89320410e-10, 1.23352411e-02, 1.64823756e-01,
           2.96894464e-10, 8.40812344e-02, 8.98210389e-10, 9.90876073e-10,
           6.51844546e-02, 7.44938306e-02, 9.78410016e-09, 1.27194222e-01,
           3.87866505e-02, 6.81161325e-02, 4.35005322e-02, 1.04863941e-01])



.. GENERATED FROM PYTHON SOURCE LINES 65-69

Benchmark
=========
For comparison, we also create a Maximum Sharpe Ratio model using the default
moments estimators:

.. GENERATED FROM PYTHON SOURCE LINES 69-77

.. code-block:: Python

    bench = MeanRisk(
        risk_measure=RiskMeasure.VARIANCE,
        objective_function=ObjectiveFunction.MAXIMIZE_RATIO,
        portfolio_params=dict(name="Max Sharpe"),
    )
    bench.fit(X_train)
    bench.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([9.43855248e-02, 2.09228437e-10, 7.30535971e-11, 1.20898034e-01,
           3.18441126e-02, 1.28499733e-10, 1.28522027e-04, 1.24120028e-01,
           1.43232875e-10, 2.78010014e-02, 2.19873005e-10, 2.49940517e-10,
           1.16368341e-01, 5.73909314e-02, 1.74857916e-09, 1.09507654e-01,
           8.64772972e-02, 1.84021249e-01, 1.34862950e-02, 3.35710067e-02])



.. GENERATED FROM PYTHON SOURCE LINES 78-81

Prediction
==========
We predict both models on the test set:

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: Python

    pred_model = model.predict(X_test)
    pred_bench = bench.predict(X_test)

    population = Population([pred_model, pred_bench])

    fig = population.plot_cumulative_returns()
    show(fig)



.. raw:: html
    :file: images/sphx_glr_plot_11_empirical_prior_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.159 seconds)


.. _sphx_glr_download_auto_examples_1_mean_risk_plot_11_empirical_prior.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skfolio/skfolio/gh-pages?urlpath=lab/tree/notebooks/auto_examples/1_mean_risk/plot_11_empirical_prior.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_11_empirical_prior.ipynb <plot_11_empirical_prior.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_11_empirical_prior.py <plot_11_empirical_prior.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_11_empirical_prior.zip <plot_11_empirical_prior.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
