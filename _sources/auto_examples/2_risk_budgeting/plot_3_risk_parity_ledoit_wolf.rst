
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_2_risk_budgeting_plot_3_risk_parity_ledoit_wolf.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_2_risk_budgeting_plot_3_risk_parity_ledoit_wolf.py:


==================================
Risk Parity - Covariance shrinkage
==================================

This tutorial shows how to incorporate covariance shrinkage in the
:class:`~skfolio.optimization.RiskBudgeting` optimization.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

Data
====
We load the S&P 500 :ref:`dataset <datasets>` composed of the daily prices of 20
assets from the S&P 500 Index composition starting from 1990-01-02 up to 2022-12-28:

.. GENERATED FROM PYTHON SOURCE LINES 15-31

.. code-block:: Python


    from plotly.io import show
    from sklearn.model_selection import train_test_split

    from skfolio import Population, RiskMeasure
    from skfolio.datasets import load_sp500_dataset
    from skfolio.moments import ShrunkCovariance
    from skfolio.optimization import RiskBudgeting
    from skfolio.preprocessing import prices_to_returns
    from skfolio.prior import EmpiricalPrior

    prices = load_sp500_dataset()

    X = prices_to_returns(prices)
    X_train, X_test = train_test_split(X, test_size=0.33, shuffle=False)








.. GENERATED FROM PYTHON SOURCE LINES 32-36

Model
=====
We create a risk parity model by using :class:`~skfolio.moments.ShrunkCovariance` as
the covariance estimator then fit it on the training set:

.. GENERATED FROM PYTHON SOURCE LINES 36-46

.. code-block:: Python

    model = RiskBudgeting(
        risk_measure=RiskMeasure.VARIANCE,
        prior_estimator=EmpiricalPrior(
            covariance_estimator=ShrunkCovariance(shrinkage=0.9)
        ),
        portfolio_params=dict(name="Risk Parity - Covariance Shrinkage"),
    )
    model.fit(X_train)
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([0.04774432, 0.0437015 , 0.04503263, 0.04647771, 0.0528462 ,
           0.04907541, 0.04852969, 0.0537393 , 0.0453914 , 0.05360544,
           0.0517859 , 0.05137979, 0.04927078, 0.05375933, 0.05112798,
           0.05417573, 0.04755329, 0.04988135, 0.05199345, 0.0529288 ])



.. GENERATED FROM PYTHON SOURCE LINES 47-48

To compare this model, we use a basic risk parity without covariance shrinkage:

.. GENERATED FROM PYTHON SOURCE LINES 48-56

.. code-block:: Python

    bench = RiskBudgeting(
        risk_measure=RiskMeasure.VARIANCE,
        portfolio_params=dict(name="Risk Parity - Basic"),
    )
    bench.fit(X_train)
    bench.weights_






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([0.0413538 , 0.03210848, 0.03372647, 0.03785094, 0.06105331,
           0.04432756, 0.0425223 , 0.06593521, 0.03451801, 0.06469243,
           0.05418786, 0.0520937 , 0.04535355, 0.06568282, 0.05103838,
           0.06894686, 0.04046603, 0.04667582, 0.05627071, 0.06119574])



.. GENERATED FROM PYTHON SOURCE LINES 57-60

Prediction
==========
We predict the model and the benchmark on the test set:

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: Python

    ptf_model_test = model.predict(X_test)
    ptf_bench_test = bench.predict(X_test)









.. GENERATED FROM PYTHON SOURCE LINES 65-69

Analysis
========
For improved analysis, it's possible to load both predicted portfolios into a
:class:`~skfolio.population.Population`:

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: Python

    population = Population([ptf_model_test, ptf_bench_test])








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Let's plot each portfolio cumulative returns:

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: Python

    fig = population.plot_cumulative_returns()
    show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_3_risk_parity_ledoit_wolf_001.html





.. GENERATED FROM PYTHON SOURCE LINES 77-80

|

Finally, we print a full summary of both strategies evaluated on the test set:

.. GENERATED FROM PYTHON SOURCE LINES 80-81

.. code-block:: Python

    population.summary()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Risk Parity - Covariance Shrinkage</th>
          <th>Risk Parity - Basic</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Mean</th>
          <td>0.068%</td>
          <td>0.065%</td>
        </tr>
        <tr>
          <th>Annualized Mean</th>
          <td>17.04%</td>
          <td>16.40%</td>
        </tr>
        <tr>
          <th>Variance</th>
          <td>0.011%</td>
          <td>0.010%</td>
        </tr>
        <tr>
          <th>Annualized Variance</th>
          <td>2.84%</td>
          <td>2.63%</td>
        </tr>
        <tr>
          <th>Semi-Variance</th>
          <td>0.0058%</td>
          <td>0.0054%</td>
        </tr>
        <tr>
          <th>Annualized Semi-Variance</th>
          <td>1.47%</td>
          <td>1.36%</td>
        </tr>
        <tr>
          <th>Standard Deviation</th>
          <td>1.06%</td>
          <td>1.02%</td>
        </tr>
        <tr>
          <th>Annualized Standard Deviation</th>
          <td>16.86%</td>
          <td>16.22%</td>
        </tr>
        <tr>
          <th>Semi-Deviation</th>
          <td>0.76%</td>
          <td>0.73%</td>
        </tr>
        <tr>
          <th>Annualized Semi-Deviation</th>
          <td>12.11%</td>
          <td>11.66%</td>
        </tr>
        <tr>
          <th>Mean Absolute Deviation</th>
          <td>0.69%</td>
          <td>0.66%</td>
        </tr>
        <tr>
          <th>CVaR at 95%</th>
          <td>2.46%</td>
          <td>2.37%</td>
        </tr>
        <tr>
          <th>EVaR at 95%</th>
          <td>5.37%</td>
          <td>5.23%</td>
        </tr>
        <tr>
          <th>Worst Realization</th>
          <td>10.66%</td>
          <td>10.34%</td>
        </tr>
        <tr>
          <th>CDaR at 95%</th>
          <td>13.02%</td>
          <td>12.39%</td>
        </tr>
        <tr>
          <th>MAX Drawdown</th>
          <td>34.58%</td>
          <td>34.30%</td>
        </tr>
        <tr>
          <th>Average Drawdown</th>
          <td>2.58%</td>
          <td>2.40%</td>
        </tr>
        <tr>
          <th>EDaR at 95%</th>
          <td>20.30%</td>
          <td>19.86%</td>
        </tr>
        <tr>
          <th>First Lower Partial Moment</th>
          <td>0.35%</td>
          <td>0.33%</td>
        </tr>
        <tr>
          <th>Ulcer Index</th>
          <td>0.043</td>
          <td>0.041</td>
        </tr>
        <tr>
          <th>Gini Mean Difference</th>
          <td>1.04%</td>
          <td>1.00%</td>
        </tr>
        <tr>
          <th>Value at Risk at 95%</th>
          <td>1.51%</td>
          <td>1.46%</td>
        </tr>
        <tr>
          <th>Drawdown at Risk at 95%</th>
          <td>9.30%</td>
          <td>8.97%</td>
        </tr>
        <tr>
          <th>Entropic Risk Measure at 95%</th>
          <td>3.00</td>
          <td>3.00</td>
        </tr>
        <tr>
          <th>Fourth Central Moment</th>
          <td>0.000025%</td>
          <td>0.000023%</td>
        </tr>
        <tr>
          <th>Fourth Lower Partial Moment</th>
          <td>0.000012%</td>
          <td>0.000011%</td>
        </tr>
        <tr>
          <th>Skew</th>
          <td>-3.67%</td>
          <td>-5.67%</td>
        </tr>
        <tr>
          <th>Kurtosis</th>
          <td>1996.82%</td>
          <td>2065.52%</td>
        </tr>
        <tr>
          <th>Sharpe Ratio</th>
          <td>0.064</td>
          <td>0.064</td>
        </tr>
        <tr>
          <th>Annualized Sharpe Ratio</th>
          <td>1.01</td>
          <td>1.01</td>
        </tr>
        <tr>
          <th>Sortino Ratio</th>
          <td>0.089</td>
          <td>0.089</td>
        </tr>
        <tr>
          <th>Annualized Sortino Ratio</th>
          <td>1.41</td>
          <td>1.41</td>
        </tr>
        <tr>
          <th>Mean Absolute Deviation Ratio</th>
          <td>0.097</td>
          <td>0.098</td>
        </tr>
        <tr>
          <th>First Lower Partial Moment Ratio</th>
          <td>0.19</td>
          <td>0.20</td>
        </tr>
        <tr>
          <th>Value at Risk Ratio at 95%</th>
          <td>0.045</td>
          <td>0.045</td>
        </tr>
        <tr>
          <th>CVaR Ratio at 95%</th>
          <td>0.027</td>
          <td>0.027</td>
        </tr>
        <tr>
          <th>Entropic Risk Measure Ratio at 95%</th>
          <td>0.00023</td>
          <td>0.00022</td>
        </tr>
        <tr>
          <th>EVaR Ratio at 95%</th>
          <td>0.013</td>
          <td>0.012</td>
        </tr>
        <tr>
          <th>Worst Realization Ratio</th>
          <td>0.0063</td>
          <td>0.0063</td>
        </tr>
        <tr>
          <th>Drawdown at Risk Ratio at 95%</th>
          <td>0.0073</td>
          <td>0.0073</td>
        </tr>
        <tr>
          <th>CDaR Ratio at 95%</th>
          <td>0.0052</td>
          <td>0.0053</td>
        </tr>
        <tr>
          <th>Calmar Ratio</th>
          <td>0.0020</td>
          <td>0.0019</td>
        </tr>
        <tr>
          <th>Average Drawdown Ratio</th>
          <td>0.026</td>
          <td>0.027</td>
        </tr>
        <tr>
          <th>EDaR Ratio at 95%</th>
          <td>0.0033</td>
          <td>0.0033</td>
        </tr>
        <tr>
          <th>Ulcer Index Ratio</th>
          <td>0.016</td>
          <td>0.016</td>
        </tr>
        <tr>
          <th>Gini Mean Difference Ratio</th>
          <td>0.065</td>
          <td>0.065</td>
        </tr>
        <tr>
          <th>Effective Number of Assets</th>
          <td>19.921033968992518</td>
          <td>18.995810799947282</td>
        </tr>
        <tr>
          <th>Assets Number</th>
          <td>20</td>
          <td>20</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.167 seconds)


.. _sphx_glr_download_auto_examples_2_risk_budgeting_plot_3_risk_parity_ledoit_wolf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skfolio/skfolio/gh-pages?urlpath=lab/tree/notebooks/auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3_risk_parity_ledoit_wolf.ipynb <plot_3_risk_parity_ledoit_wolf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3_risk_parity_ledoit_wolf.py <plot_3_risk_parity_ledoit_wolf.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_3_risk_parity_ledoit_wolf.zip <plot_3_risk_parity_ledoit_wolf.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
