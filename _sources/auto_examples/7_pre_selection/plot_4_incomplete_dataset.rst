
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/7_pre_selection/plot_4_incomplete_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_7_pre_selection_plot_4_incomplete_dataset.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_7_pre_selection_plot_4_incomplete_dataset.py:


============================================================
Handling Incomplete Datasets: Inception, Expiry, and Default
============================================================

When working with large datasets over long timeframes, we commonly encounter:

* **Inception**: Assets that began trading after the start of the dataset.
* **Expiry**: Expiring assets such as bonds, options, and futures.
* **Default**: Assets that defaulted.
* **Voluntary Delisting**

These events create challenges for portfolio optimization and backtesting.
A common workaround is to focus only on assets with complete datasets, excluding those
with later inception dates, defaults, or earlier expirations. However, this approach
either shortens the backtesting period or reduces the number of assets, potentially
introducing survivorship bias.

An additional challenge arises with assets that have known expiration dates
(e.g., options, bonds, futures). If an asset is due to expire in the next period, it
may be preferable to exit early, especially if it’s not cash-settled.

In this tutorial, we will demonstrate how to implement all these rules in a single
`Pipeline` that can be used with cross-validation techniques such as `WalkForward` and
hyperparameter tuning tools like `GridSearchCV`.

.. GENERATED FROM PYTHON SOURCE LINES 29-40

Data
====
Let's create price data for four hypothetical assets over 13 days:

* `inception`: Asset with a later inception date.
* `defaulted`: Asset that defaulted.
* `expired`: Asset that expired.
* `complete`: Asset with a complete price history.

We’ll convert these prices to returns and split the dataset into 3 rebalancing
periods of 4 days each.

.. GENERATED FROM PYTHON SOURCE LINES 40-82

.. code-block:: Python



    import datetime as dt

    import matplotlib.image as mpi
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from sklearn import set_config
    from sklearn.impute import SimpleImputer
    from sklearn.model_selection import GridSearchCV
    from sklearn.pipeline import Pipeline

    from skfolio.model_selection import WalkForward, cross_val_predict
    from skfolio.optimization import EqualWeighted
    from skfolio.pre_selection import SelectComplete, SelectNonExpiring
    from skfolio.preprocessing import prices_to_returns


    def generate_prices(n: int) -> list[float]:
        # Just for example purposes
        return list(100 * np.cumprod(1 + np.random.normal(0, 0.01, n)))


    prices = pd.DataFrame(
        {
            "inception": [np.nan] * 3 + generate_prices(10),
            "defaulted": generate_prices(6) + [0.0] + [np.nan] * 6,
            "expired": generate_prices(10) + [np.nan] * 3,
            "complete": generate_prices(13),
        },
        index=pd.date_range(start="2024-01-03", end="2024-01-19", freq="B"),
    )

    X = prices_to_returns(prices, drop_inceptions_nan=False, fill_nan=False)

    img = mpi.imread("../images/incomplete_dataset.png")
    fig, ax = plt.subplots(figsize=(10, 6.327))
    ax.imshow(img)
    ax.axis("off")
    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)




.. image-sg:: /auto_examples/7_pre_selection/images/sphx_glr_plot_4_incomplete_dataset_001.png
   :alt: plot 4 incomplete dataset
   :srcset: /auto_examples/7_pre_selection/images/sphx_glr_plot_4_incomplete_dataset_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-96

Pipeline
========
Our `Pipeline` will handle the following cases:

When we **train** our optimization model on the first period (magenta box), we want to
exclude the “inception” asset.

When **testing** on the second period (green box), we want to capture the loss on the
“defaulted” asset (the -100% on 2024-01-11) without failing on the subsequent NaNs.

Then, when we **train** on the second period, we want to include the “inception”
asset, exclude the defaulted asset, and also exclude the “expired” asset that will
expire in the next **test** period (blue box).

.. GENERATED FROM PYTHON SOURCE LINES 96-114

.. code-block:: Python


    set_config(transform_output="pandas")

    model = Pipeline(
        [
            ("select_complete_assets", SelectComplete()),
            (
                "select_non_expiring_assets",
                SelectNonExpiring(
                    expiration_dates={"expired": dt.datetime(2024, 1, 16)},
                    expiration_lookahead=pd.offsets.BusinessDay(4),
                ),
            ),
            ("zero_imputation", SimpleImputer(strategy="constant", fill_value=0)),
            ("optimization", EqualWeighted()),
        ]
    )








.. GENERATED FROM PYTHON SOURCE LINES 115-118

The transformer `SelectComplete` handles the "inception" and "defaulted" assets,
while `SelectNonExpiring` excludes assets close to expiration.
`SimpleImputer` replaces NaNs with 0s on the "defaulted" asset in the test period.

.. GENERATED FROM PYTHON SOURCE LINES 120-123

Walk-Forward Cross-Validation
=============================
Now, we pass this pipeline model into `cross_val_predict` using `WalkForward`:

.. GENERATED FROM PYTHON SOURCE LINES 123-126

.. code-block:: Python


    pred = cross_val_predict(model, X, cv=WalkForward(train_size=4, test_size=4))








.. GENERATED FROM PYTHON SOURCE LINES 127-128

As expected, the pipeline correctly applies our rules to each period:

.. GENERATED FROM PYTHON SOURCE LINES 128-132

.. code-block:: Python

    df = pred.composition
    df.columns = ["Period 2 (green)", "Period 3 (blue)"]
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Period 2 (green)</th>
          <th>Period 3 (blue)</th>
        </tr>
        <tr>
          <th>asset</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>defaulted</th>
          <td>0.333333</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>expired</th>
          <td>0.333333</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>complete</th>
          <td>0.333333</td>
          <td>0.5</td>
        </tr>
        <tr>
          <th>inception</th>
          <td>0.000000</td>
          <td>0.5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 133-135

And from the out-of-sample returns, we can see that the default event was captured on
2024-01-11:

.. GENERATED FROM PYTHON SOURCE LINES 135-139

.. code-block:: Python

    df = pred.returns_df
    df






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2024-01-10    0.012630
    2024-01-11   -0.338689
    2024-01-12    0.001842
    2024-01-15    0.002177
    2024-01-16   -0.005285
    2024-01-17    0.006521
    2024-01-18    0.001912
    2024-01-19   -0.003645
    Name: returns, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 140-144

Step-by-Step Fitting with `WalkForward`
=======================================
Let’s break down the `cross_val_predict` by calling `fit` and `predict` on each
period:

.. GENERATED FROM PYTHON SOURCE LINES 144-156

.. code-block:: Python

    print("Rebalancing Period 1")
    model.fit(X.iloc[:4])
    portfolio = model.predict(X.iloc[4:8])
    print(portfolio.composition)
    print(portfolio.returns)

    print("Rebalancing Period 2")
    model.fit(X.iloc[4:8])
    portfolio = model.predict(X.iloc[8:])
    print(portfolio.composition)
    print(portfolio.returns)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Rebalancing Period 1
               EqualWeighted
    asset                   
    defaulted       0.333333
    expired         0.333333
    complete        0.333333
    [ 0.01263027 -0.33868916  0.00184163  0.00217699]
    Rebalancing Period 2
               EqualWeighted
    asset                   
    inception            0.5
    complete             0.5
    [-0.00528499  0.00652079  0.00191167 -0.00364507]




.. GENERATED FROM PYTHON SOURCE LINES 157-163

Hyper-Parameter Tuning
======================
The `Pipeline` model can also be passed to `GridSearchCV` to find the optimal
hyperparameters for a specified score (by default, the out-of-sample average
Sharpe ratio). For example, we could use it to find the optimal exit time before a
bond expires:

.. GENERATED FROM PYTHON SOURCE LINES 163-176

.. code-block:: Python


    grid_search = GridSearchCV(
        estimator=model,
        cv=WalkForward(train_size=4, test_size=4),
        param_grid={
            "select_non_expiring_assets__expiration_lookahead": [
                pd.offsets.BusinessDay(i) for i in range(20)
            ],
        },
    )
    grid_search.fit(X)
    model = grid_search.best_estimator_









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.450 seconds)


.. _sphx_glr_download_auto_examples_7_pre_selection_plot_4_incomplete_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skfolio/skfolio/gh-pages?urlpath=lab/tree/notebooks/auto_examples/7_pre_selection/plot_4_incomplete_dataset.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_4_incomplete_dataset.ipynb <plot_4_incomplete_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_4_incomplete_dataset.py <plot_4_incomplete_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_4_incomplete_dataset.zip <plot_4_incomplete_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
