# -----------------------------------------------------------------------------
# Continuous Integration
#
# Stages:
#   1. Lint & format
#   2. Full test matrix on Linux
#        • Latest deps on all supported Pythons
#        • Min deps only on oldest Python
#   3. Cross-OS tests on macOS & Windows (latest deps)
#   4. Canary on next Python (allowed to fail)
#
# -----------------------------------------------------------------------------

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel outdated runs for the same branch/PR
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Least-privilege permissions for CI
permissions:
  contents: read

defaults:
  run:
    shell: bash   # consistent shell across Linux/macOS/Windows

env:
  MAIN_PYTHON: "3.13"  # primary Python used for linting & coverage

# -----------------------------------------------------------------------------
# 1) Lint & format
# -----------------------------------------------------------------------------
jobs:
  lint:
    name: Lint & Format (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ env.MAIN_PYTHON }}

      - uses: astral-sh/setup-uv@v4
        with:
          version: latest

      - name: Create venv
        run: uv venv

      - name: Install project (dev extras)
        run: uv pip install -e ".[dev]"

      - name: Ruff (lint + format check)
        run: |
          uv run ruff check --output-format=github
          uv run ruff format --check

# -----------------------------------------------------------------------------
# 2) Full test matrix on Linux
# -----------------------------------------------------------------------------
  tests-linux:
    name: Tests (Linux, ${{ matrix.python-version }} • ${{ matrix.deps }})
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        include:
          # Min deps only once (oldest Python)
          - python-version: "3.10"
            deps: "min"
          # Latest deps on all supported Pythons
          - python-version: "3.10"
            deps: "latest"
          - python-version: "3.11"
            deps: "latest"
          - python-version: "3.12"
            deps: "latest"
          - python-version: "3.13"
            deps: "latest"

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v4
        with:
          version: latest

      - name: Create venv
        run: uv venv

      - name: Install dependencies
        run: |
          if [ "${{ matrix.deps }}" = "min" ]; then
            uv pip install -e . --resolution=lowest-direct
            uv pip install -e ".[dev]"
          else
            uv pip install -e ".[dev]"
          fi

      # Run tests normally for all jobs except the single coverage job
      - name: Run tests
        if: ${{ !(matrix.python-version == env.MAIN_PYTHON && matrix.deps == 'latest') }}
        run: uv run pytest -q --maxfail=1

      # Coverage on a single representative job (Py MAIN_PYTHON + latest)
      - name: Run tests with coverage (main Python • latest only)
        if: ${{ matrix.python-version == env.MAIN_PYTHON && matrix.deps == 'latest' }}
        run: uv run pytest -q --maxfail=1 --cov=skfolio --cov-report=xml

      - name: Upload coverage to Codecov
        if: ${{ matrix.python-version == env.MAIN_PYTHON && matrix.deps == 'latest' }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false

# -----------------------------------------------------------------------------
# 3) Cross-OS tests
# -----------------------------------------------------------------------------
  tests-os:
    name: Cross-OS (${{ matrix.os }} • latest)
    runs-on: ${{ matrix.os }}
    needs: lint
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ env.MAIN_PYTHON }}

      - uses: astral-sh/setup-uv@v4
        with:
          version: latest

      - name: Create venv
        run: uv venv

      - name: Install project (latest deps)
        run: uv pip install -e ".[dev]"

      - name: Run tests
        run: uv run pytest -q --maxfail=1

# -----------------------------------------------------------------------------
# 4) Canary on next Python
# -----------------------------------------------------------------------------
#  canary:
#    name: Canary (Linux • Py 3.15-dev • latest)
#    runs-on: ubuntu-latest
#    continue-on-error: true   # informational only
#    timeout-minutes: 50
#    steps:
#      - uses: actions/checkout@v5
#
#      - uses: actions/setup-python@v6
#        with:
#          python-version: "3.15-dev"
#
#      - uses: astral-sh/setup-uv@v4
#        with:
#          version: latest
#
#      - name: Create venv
#        run: uv venv
#
#      - name: Install project (latest deps)
#        run: uv pip install -e ".[dev]"
#
#      - name: Run tests
#        run: uv run pytest -q --maxfail=1