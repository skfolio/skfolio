r"""
============================
Stress Test with Vine Copula
============================

This tutorial demonstrates how to build stress scenarios using the
:class:`~skfolio.distribution.VineCopula` estimator and subsequently apply them
to stress test a portfolio model.

In :ref:`the previous tutorial <sphx_glr_auto_examples_2_synthetic_data_plot_2_vine_copula.py>`,
we generated both non-conditional and conditional (stressed) synthetic returns using
the :class:`~skfolio.distribution.VineCopula` estimator.

Here, we illustrate how to integrate these stressed scenarios into a portfolio model.
"""

# %%
# Data
# ====
# We load the S&P 500 :ref:`dataset <datasets>` and select 6 stocks (for demonstration
# purposes) starting from 1990-01-02 up to 2022-12-28:
from plotly.io import show

from skfolio import RiskMeasure
from skfolio.datasets import load_sp500_dataset
from skfolio.distribution import VineCopula, compute_pseudo_observations
from skfolio.optimization import MeanRisk
from skfolio.preprocessing import prices_to_returns

prices = load_sp500_dataset()
prices = prices[["AMD", "BAC", "HD", "JPM", "LLY", "CVX"]]
X = prices_to_returns(prices)

# %%
# Portfolio
# =========
# We create a Minimum CVaR portfolio and fit it on the historical retruns.
model = MeanRisk(risk_measure=RiskMeasure.CVAR)
model.fit(X)
model.weights_

# %%
# Vine Copula
# ===========
# Next, we create a Vine Copula and fit it on the historical retruns.
# By specifying "BAC" as a central asset, we ensure it occupies a central position in
# the vine, thereby promoting a C-like structure that enhances conditional sampling.
vine = VineCopula(log_transform=True, central_assets=["BAC"], n_jobs=-1)
vine.fit(X)
vine.display_vine()

# %%
# Vine Analysis
# =============
# We begin by analyzing the Vine model.
#
# Let's plot the scatter matrix of the returns generated by the Vine model and compare
# them with the historical returns.
fig = vine.plot_scatter_matrix(X, random_state=0)
fig.update_layout(height=600)

# %%
# Let's plot the marginal distribution of the assets and compare them with the
# historical data:
vine.plot_marginal_distributions(X, random_state=0)

# %%
# Now, let's investigate the bivariate copula between BAC and JPM.
# The model indicates a tail dependence coefficient of approximately 51%, suggesting
# a relatively high likelihood that extreme returns (both negative and positive) occur
# simultaneously for the assets. Since the Student's t copula is symmetric, the tail
# dependence is the same for both the lower and upper tails.
edge = vine.trees_[0].edges[2]
copula = edge.copula
print(edge)
print(f"Lower Tail Dependence: {copula.lower_tail_dependence:.2%}")
print(f"Upper Tail Dependence: {copula.upper_tail_dependence:.2%}")

# %%
# Let's plot the tail concentration of the copula model versus the historical data:
U = compute_pseudo_observations(X[["BAC", "JPM"]])
fig = copula.plot_tail_concentration(U)
show(fig)

# %%
# |
# The analysis confirms that the model effectively captures fat tail dependencies.

# %%
# Conditional Sampling
# ====================
# We now sample 50,000 new returns from the Vine Copula, conditioning on a one-day loss
# of 10% for BAC.
conditioning = {"BAC": -0.10}
X_stressed = vine.sample(n_samples=50000, conditioning=conditioning, random_state=0)

# %%
# Let's plot the marginal distribution of the stressed assets and compare them with the
# historical data:
vine.plot_marginal_distributions(X, conditioning=conditioning, random_state=0)

# %%
# Let's plot the scatter matrix of the stressed assets and compare them with the
# historical data.
fig = vine.plot_scatter_matrix(X, conditioning=conditioning, random_state=0)
fig.update_layout(height=600)
# %%
# Stress Test
# ===========
# Finally, we utilize the stressed samples to conduct a stress test on our portfolio.
ptf = model.predict(X_stressed)

print(f"CVaR at 95%: {ptf.cvar:.2%}")
print(f"EVaR at 95%: {ptf.evar:.2%}")
print(f"Worst Realization: {ptf.worst_realization:.2%}")
print(f"Mean: {ptf.mean:.2%}")
print(f"Standard Deviation: {ptf.standard_deviation:.2%}")
ptf.plot_returns_distribution()

# %%
# Conclusion
# ===========
# In this tutorial, we demonstrated how to construct stress scenarios using a Vine
# Copula and apply these scenarios to stress test a portfolio model.
